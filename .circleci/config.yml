version: 2.1
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

jobs:
  build_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test 
          command: |
            cd frontend
            npm i
            npm run test

  test_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test 
          command: |
            cd backend
            npm i
            npm run test

  scan_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan & analyz 
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

  scan_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan & analyz 
          command: |
            cd backend
            rm -rf package-lock.json node_modules
            npm i
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit fix --force            

  deploy_infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run: 
          name: destroy_environment
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: on_fail

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run: 
          name: destroy_environment
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: on_fail

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - ci_cd_project/.circleci/ansible/inventory.txt
      - run:
          name: save API_URL to memstash.io
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text`
            curl -H "Content-Type: text/plain" -H "token: 7ee37bb2-03a9-47fd-b8d4-e66d1b92c70d" --request PUT --data "http://${BACKEND_IP}:3030" https://api.memstash.io/values/API_URL

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5f:ac:d2:4b:2b:a0:e6:c9:1c:93:c2:bc:15:bf:e8:82"
      - attach_workspace:
          at: ~/
      - run: apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook ci_cd_project/.circleci/ansible/configure-server.yml -i inventory.txt
      - run: 
          name: destroy_environment
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: on_fail

  run-migrations:
    docker:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      


workflows:
  ci_pipeline_exercise:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires:
            - "build_frontend"
      - test_backend:
          requires:
            - "build_backend"
      - scan_frontend:
          requires:
            - "build_frontend"
      - scan_backend:
          requires:
            - "build_backend"
      - deploy_infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
      - configure_infrastructure:
          requires:
            - "deploy_infrastructure"