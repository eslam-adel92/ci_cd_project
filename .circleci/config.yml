version: 2.1
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments <<parameters.workflow_id>>
          when: <<parameters.event>>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      event:
        type: string   
    steps:
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Revert migrations
          when: <<parameters.event>>
          command: |
            SUCCESS = `curl -H "token: 930727e1-9c54-4501-a973-923d8093d161" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}`
            if(( $SUCCESS==1 )); 
            then
             cd backend
             npm install
             npm run migrations:revert
            fi

jobs:
  build_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test 
          command: |
            cd frontend
            npm i
            npm run test

  test_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test 
          command: |
            cd backend
            npm i
            npm run test

  scan_frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan & analyz 
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

  scan_backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan & analyz 
          command: |
            cd backend
            rm -rf package-lock.json node_modules
            npm i
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit fix --force            

  deploy_infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      # - run:
      #     name: check pwd and list files.
      #     command: |
      #       pwd
      #       ls -l
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: save API_URL to memstash.io
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text`
            curl -H "Content-Type: text/plain" -H "token: 7ee37bb2-03a9-47fd-b8d4-e66d1b92c70d" --request PUT --data "http://${BACKEND_IP}:3030" https://api.memstash.io/values/API_URL

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5f:ac:d2:4b:2b:a0:e6:c9:1c:93:c2:bc:15:bf:e8:82"
      - attach_workspace:
          at: ~/
      - run: apk add --update ansible curl unzip
      - run:
          name: install awscli v2, to be able to destroy environment.
          command: |
            GLIBC_VER=2.31-r0
            apk --no-cache add \
                    binutils \
                    curl \
                && curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \
                && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk \
                && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk \
                && apk add --no-cache \
                    glibc-${GLIBC_VER}.apk \
                    glibc-bin-${GLIBC_VER}.apk \
                && curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip \
                && unzip awscliv2.zip \
                && aws/install \
                && rm -rf \
                    awscliv2.zip \
                    aws \
                    /usr/local/aws-cli/v2/*/dist/aws_completer \
                    /usr/local/aws-cli/v2/*/dist/awscli/data/ac.index \
                    /usr/local/aws-cli/v2/*/dist/awscli/examples \
                && apk --no-cache del \
                    binutils \
                    curl \
                && rm glibc-${GLIBC_VER}.apk \
                && rm glibc-bin-${GLIBC_VER}.apk \
                && rm -rf /var/cache/apk/*

      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  run_migrations:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: install awscli v2 into nodejs, to be able to destroy environment.
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            npm run migrations > migration.output
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" backend/migration.output; then
                echo "DB migration was successful, will update memstash..."
                curl -H "Content-Type: text/plain" -H "token: 930727e1-9c54-4501-a973-923d8093d161" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
                echo "DB migration failed, will update memstash..."
                curl -H "Content-Type: text/plain" -H "token: 930727e1-9c54-4501-a973-923d8093d161" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail      

  deploy_frontend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: install awscli v2 into nodejs, to be able to destroy environment.
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export API_URL=`curl -H "token: 7ee37bb2-03a9-47fd-b8d4-e66d1b92c70d" --request GET https://api.memstash.io/values/API_URL`
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            ls -l            
      - run:
          name: Copy dist files to s3.
          command: |
            pwd
            cd frontend && pwd
            aws s3 cp ./dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive --acl public-read

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  deploy_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5f:ac:d2:4b:2b:a0:e6:c9:1c:93:c2:bc:15:bf:e8:82"
      - attach_workspace:
          at: ~/
      - run: apk add --update ansible curl unzip
      - run:
          name: install awscli v2, to be able to destroy environment.
          command: |
            GLIBC_VER=2.31-r0
            apk --no-cache add \
                    binutils \
                    curl \
                && curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \
                && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk \
                && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk \
                && apk add --no-cache \
                    glibc-${GLIBC_VER}.apk \
                    glibc-bin-${GLIBC_VER}.apk \
                && curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip \
                && unzip awscliv2.zip \
                && aws/install \
                && rm -rf \
                    awscliv2.zip \
                    aws \
                    /usr/local/aws-cli/v2/*/dist/aws_completer \
                    /usr/local/aws-cli/v2/*/dist/awscli/data/ac.index \
                    /usr/local/aws-cli/v2/*/dist/awscli/examples \
                && apk --no-cache del \
                    binutils \
                    curl \
                && rm glibc-${GLIBC_VER}.apk \
                && rm glibc-bin-${GLIBC_VER}.apk \
                && rm -rf /var/cache/apk/*
      - run:
          name: Deploy backend
          command: |
            pwd
            cat .circleci/ansible/roles/deploy/tasks/main.yml
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  smoke_test:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout:
      - run:
          name: Install dependencies
          command: |
            yum install curl 
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=`curl -H "token: 7ee37bb2-03a9-47fd-b8d4-e66d1b92c70d" --request GET https://api.memstash.io/values/API_URL`
      - run:
          name: Backend smoke test.
          command: |
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            curl -s ${URL} | grep -q "Welcome"
      # - destroy_environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     event: on_fail
      # - revert_migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     event: on_fail

workflows:
  ci_pipeline_exercise:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires:
            - "build_frontend"
      - test_backend:
          requires:
            - "build_backend"
      - scan_frontend:
          requires:
            - "build_frontend"
      - scan_backend:
          requires:
            - "build_backend"
      - deploy_infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
      - configure_infrastructure:
          requires:
            - "deploy_infrastructure"
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]
      - smoke_test:
          requires:
            - "deploy_backend"
            - "deploy_frontend"